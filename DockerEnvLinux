import groovy.util.*
import groovy.json.JsonSlurperClassic

def globalLib = library('global-shared-lib').com.test
def Utilities = globalLib.Utilities

def solutionRoot = params.SolutionRoot
def platformTag = params.PlatformTag
def storefrontTag = params.StorefrontTag
node{
    if(!solutionRoot || !platformTag || !storefrontTag)
    {
        echo "Solution root: ${solutionRoot}\nPlatform Tag: ${platformTag}\nStorefront Tag: ${storefrontTag}"
        throw new Exception("This pipeline must be the downstream")
    }
    stage('Init')
    {
        dir(solutionRoot)
        {
            stash includes: "**", name: 'solution'
        }
    }
}
node('linux') 
{
    try 
    {
        stage('Create Test Environment')
        {
            timestamps
            {
                checkout scm
                unstash 'solution'
                sh "cp ~/docker/docker-compose.yml ${env.WORKSPACE}"
                def platformPort = Utilities.getPlatformPort(this)
                def storefrontPort = Utilities.getStorefrontPort(this)
                def sqlPort = Utilities.getSqlPort(this)
                withEnv(["PLATFORM_DOCKER_TAG=${platformTag}", "STOREFRONT_DOCKER_TAG=${storefrontTag}", "DOCKER_PLATFORM_PORT=${platformPort}", "DOCKER_STOREFRONT_PORT=${storefrontPort}", "DOCKER_SQL_PORT=${sqlPort}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
                    sh "docker-compose up -d"
                }
            }
        }
        stage('Install Modules')
        {
            timestamps
            {
                def platformHost = Utilities.getPlatformCoreHost(this)
                def platformContainerId = Utilities.getPlatformContainer(this)
                echo "Platform Host: ${platformHost}"
                sleep 10
                Utilities.runPS(this, "docker_v3/setup-modulesFromDir.ps1", "-PlatformContainer ${platformContainerId} -ModulesDir ${env.WORKSPACE}/module -Verbose -Debug")
                Utilities.runPS(this, "docker_v3/vc-check-installed-modules.ps1", "-ApiUrl ${platformHost} -Verbose -Debug")
            }
        }
        stage('Install Sample Data')
        {
            timestamps
            {
                Utilities.runPS(this, "docker_v3/vc-setup-sampledata.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -Verbose -Debug")
            }
        }
        stage('Theme Install')
        {
            timestamps
            {
                Utilities.runPS(this, "docker_v3/vc-theme-install.ps1", "-ThemePath ${env.WORKSPACE}/theme -StorefrontContainer ${Utilities.getStorefrontContainer(this)}")
            }
        }
        // stage("Swagger Schema Validation")
        // {
        //     timestamps
        //     {
        //         def swaggerSchemaPath = "${workspace}\\swaggerSchema${env.BUILD_NUMBER}.json"
        //         Utilities.runPS(this, "docker_v3/vc-get-swagger.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -OutFile ${swaggerSchemaPath} -Verbose -Debug")
        //         def swaggerResult = pwsh script: "vc-build ValidateSwaggerSchema -SwaggerSchemaPath ${swaggerSchemaPath}", returnStatus: true
        //         if(swaggerResult != 0)
        //         {
        //             echo "Swagger Schema contains error"
        //         }
        //     }
        // }

        // stage("E2E")
        // {
        //     timestamps
        //     {
        //         def e2eDir = "${env.WORKSPACE}/e2e"
        //         dir(e2eDir)
        //         {
        //             git changelog: false, credentialsId: '38b768a3-7d9c-4203-9389-d6c6d8d6aff4', poll: false, url: 'https://github.com/VirtoCommerce/vc-quality-gate-katalon.git'
        //             def e2eStatus = 'success'
        //             try{
        //                 pwsh "/opt/KRE/katalonc -projectPath=\"${e2eDir}/platform_storefront.prj\" -testSuitePath=\"Test Suites/StorefrontPlatform\" -apiKey=\"${env.KATALON_API_KEY}\" -browserType=\"Chrome (headless)\" -g_StoreURL=\"http://localhost:${Utilities.getStorefrontPort(this)}\" -executionProfile=\"default\""
        //             }
        //             catch(any)
        //             {
        //                 echo any.getMessage()
        //                 e2eStatus = 'failed'
        //             }
        //             def platformPort = Utilities.getPlatformPort(this)
        //             def storefrontPort = Utilities.getStorefrontPort(this)
        //             def msg = "E2E ${e2eStatus}\nStorefront:\nhttp://ci.virtocommerce.com:${storefrontPort}\nPlatform:\nhttp://ci.virtocommerce.com:${platformPort}"
        //             input message: msg
        //         }
        //     }
        // }
    }
    catch(any)
    {
        throw any
    }
    finally
    {
        def platformPort = Utilities.getPlatformPort(this)
        def storefrontPort = Utilities.getStorefrontPort(this)
        def sqlPort = Utilities.getSqlPort(this)
        withEnv(["PLATFORM_DOCKER_TAG=${platformTag}", "STOREFRONT_DOCKER_TAG=${storefrontTag}", "DOCKER_PLATFORM_PORT=${platformPort}", "DOCKER_STOREFRONT_PORT=${storefrontPort}", "DOCKER_SQL_PORT=${sqlPort}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
            sh "docker-compose down -v"
        }
    }

}