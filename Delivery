
import groovy.util.*
import groovy.json.JsonSlurperClassic

def globalLib = library('global-shared-lib').com.test
def Utilities = globalLib.Utilities
def Packaging = globalLib.Packaging
def Modules = globalLib.Modules
def Settings = globalLib.Settings

def SETTINGS

def DELIVERY_BACKEND = false
def DELIVERY_FRONTEND = false
def DELIVERY_THEME = false
def UPDATE_CS = false
def UPDATE_PLATFORM = false
def UPDATE_IMAGE = false
def UPDATE_MODULE = false
def LOGIC_APPS = false

def UNSTABLE = false
def CAUSES = []

def REGION
def BRANCH_NAME
def ENV_NAME

def PLATFORM_VERSION
def PROJECT_TYPE
def BACKEND_FILE
def FRONTEND_FILE
def THEME_FILE
def MODULE_ID
def MODULE_FILE
def LOGICAPP_FILE
def LOGICAPP_NAME

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT
def DOCKER_PREFIX
def DOCKER_TAG

def PROJECT_TYPES


pipeline {
    agent any

    options{
        timestamps()
    }
    
    stages{
        stage("User Input"){
            steps{
                script{
                    def settingsFileContent
                    configFileProvider([configFile(fileId: 'delivery_settings', variable: 'SETTINGS_FILE')]) {
                        settingsFileContent = readFile(SETTINGS_FILE)
                    }
                    SETTINGS = Settings.new(settingsFileContent)
                    def regionChoices = SETTINGS.getProjects().join("\n")
                    def buildOrder = Utilities.getNextBuildOrder(this)
                    def userInputRegion = input message: "Select Region", parameters: [
                        choice(name: 'Region', choices: regionChoices)
                    ]
                    PROJECT_TYPE = 'SOLUTION'
                    REGION = userInputRegion
                    UPDATE_CS = true
                    SETTINGS.setProject(REGION)

                    def envChoices = SETTINGS.getBranches().join("\n")
                    def userEnvInput = input message: "Select Environment", parameters: [
                        choice(name: 'Environments', choices: envChoices)
                    ]
                    ENV_NAME = userEnvInput
                    SETTINGS.setBranch(ENV_NAME)
                    
                    def userInputBranch
                    def branchesArr = SETTINGS['branch'] as String[]
                    if(branchesArr.size() > 1)
                    {
                        userInputBranch = input message: "Select Branch", parameters: [
                            choice(name: 'Branch', choices: branchesArr.join("\n"))
                        ]
                    }
                    else
                    {
                        userInputBranch = branchesArr.first()
                    }

                    BRANCH_NAME = userInputBranch
                    echo "Vars: REGION - ${REGION}, UPDATE_CS - ${UPDATE_CS}, ENV_NAME - ${ENV_NAME}, BRANCH_NAME - ${BRANCH_NAME}"
                    def msgToHook = "Delivery Parameters: ${REGION}<br/>Environment ${ENV_NAME}<br/>Branch Name: ${BRANCH_NAME}<br/>${UPDATE_CS ? "Update Solution<br/>":""}"
                    Utilities.notifyBuildStatus(this, env.TEAMS_HOOK, msgToHook, 'STARTED')
                }
            }
        }

        stage("Preparing Solution"){
            when{
                expression {
                    UPDATE_CS
                }
            }
            steps{
                script{
                    checkout scm
                    def solutionRoot = "${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}"
                    def csSrc = "${solutionRoot}\\${BRANCH_NAME}"
                    def modulesRoot = "${env.WORKSPACE}\\CS\\module"
                    def platformRoot = "${env.WORKSPACE}\\CS\\platform"
                    powershell script: "Remove-Item -Path ${env.WORKSPACE}\\CS\\* -Recurse -Force -ErrorAction Continue", label: "Clean Workspace"
                    if(BRANCH_NAME == 'support_2.x' || BRANCH_NAME == 'support_2.x-dev' || BRANCH_NAME == 'dev' || BRANCH_NAME == 'master')
                    {
                        //theme
                        def themeIncludeParam = ''
                        def themeSrc = "${solutionRoot}\\${SETTINGS['themeBranch']}\\theme"
                        def themeDst = "${env.WORKSPACE}\\CS\\theme"
                        if(SETTINGS['themeName'] != '' && SETTINGS['themeName'] != null)
                        {
                            themeIncludeParam = "-Include ${SETTINGS['themeName'].join(',')}"
                            echo "themeName: not empty"
                        }
                        powershell script: "mkdir ${themeDst}"
                        powershell script: "Copy-Item -Path ${themeSrc}\\* ${themeIncludeParam} -Destination ${themeDst} -Recurse -Force", label: "Copy Theme to Workspace"
                        //storefront
                        def storefrontSrc = "${solutionRoot}\\${SETTINGS['storefrontBranch']}"
                        echo "storefrontSrc: ${storefrontSrc}"
                        powershell script: "Copy-Item -Path ${storefrontSrc}\\* -Destination ${env.WORKSPACE}\\CS -Include storefront -Recurse -Force", label: "Copy Storefron to Workspace"
                        powershell script: "Copy-Item -Path ${csSrc}\\* -Destination ${env.WORKSPACE}\\CS -Recurse -Exclude storefront,theme -Force", label: "Copy Solution to Workspace"
                    } 
                    else if(BRANCH_NAME == 'feature_migrate-to-vc30')
                    {
                        Utilities.runSharedPS(this, 'delivery/get-backend.ps1', "-BackendPath ${env.WORKSPACE}\\CS -AppName ${SETTINGS['webAppName']} -ResourceGroupName ${SETTINGS['resourceGroupName']} -SubscriptionID ${SETTINGS['subscriptionID']}")
                        powershell "Rename-Item -Path ${env.WORKSPACE}\\CS\\modules -NewName module"
                    }
                    else
                    {
                        powershell script: "Copy-Item -Path ${csSrc}\\* -Destination ${env.WORKSPACE}\\CS -Recurse -Force", label: "Copy Solution to Workspace"
                    }
                    powershell "Rename-Item -Path ${modulesRoot} -NewName Modules"
                    if(BRANCH_NAME == 'feature_migrate-to-vc30')
                        powershell script: "Copy-Item -Path ${env.SOLUTION_FOLDER}\\vc\\${BRANCH_NAME}\\module\\* -Destination ${env.WORKSPACE}\\CS\\modules -Recurse -Force", label: "Copy vc modules to Workspace/modules"
                }
            }
        }

        stage("Docker Environment")
        {
            steps
            {
                script
                {
                    if(UPDATE_CS && isDockerRegion(REGION, BRANCH_NAME))
                    {
                        stage('Create Test Environment')
                        {
                            timestamps
                            {

                                dir(Utilities.getComposeFolderV3(this))
                                {
                                    def platformTag
                                    def storefrontTag
                                    def platformTagLinux
                                    def storefrontTagLinux
                                    switch(BRANCH_NAME)
                                    {
                                        case 'dev':
                                        platformTag = '3.0-dev'
                                        storefrontTag = '3.0-dev'
                                        platformTagLinux = '3.0-dev-linux'
                                        storefrontTagLinux = '3.0-dev-linux'
                                        break
                                        case 'master':
                                        platformTag = 'latest-win'
                                        storefrontTag = 'latest-win'
                                        platformTagLinux = 'latest'
                                        storefrontTagLinux = 'latest'
                                        break
                                    }
                                    build job: 'DockerEnvLinux', propagate: false, wait: false, parameters:[string(name:'SolutionRoot', value:"${env.WORKSPACE}/CS"), string(name:'PlatformTag', value:platformTagLinux), string(name:'StorefrontTag', value:storefrontTagLinux)]
                                    def platformPort = Utilities.getPlatformPort(this)
                                    def storefrontPort = Utilities.getStorefrontPort(this)
                                    def sqlPort = Utilities.getSqlPort(this)
                                    withEnv(["PLATFORM_DOCKER_TAG=${platformTag}", "STOREFRONT_DOCKER_TAG=${storefrontTag}", "DOCKER_PLATFORM_PORT=${platformPort}", "DOCKER_STOREFRONT_PORT=${storefrontPort}", "DOCKER_SQL_PORT=${sqlPort}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
                                        bat "docker-compose up -d"
                                    }
                                }
                            }
                        }
                        stage('Install Modules')
                        {
                            timestamps
                            {
                                def platformHost = Utilities.getPlatformCoreHost(this)
                                def platformContainerId = Utilities.getPlatformContainer(this)
                                echo "Platform Host: ${platformHost}"
                                sleep 30
                                pwsh script: "docker logs ${platformContainerId}", label: "platform container log"
                                Utilities.runPS(this, "docker_v3/setup-modulesFromDir.ps1", "-PlatformContainer ${platformContainerId} -ModulesDir ${env.WORKSPACE}/CS/modules -Verbose -Debug")
                                Utilities.runPS(this, "docker_v3/vc-check-installed-modules.ps1", "-ApiUrl ${platformHost} -Verbose -Debug")
                            }
                        }
                        stage('Install Sample Data')
                        {
                            timestamps
                            {
                                Utilities.runPS(this, "docker_v3/vc-setup-sampledata.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -Verbose -Debug")
                            }
                        }
                        stage('Theme Install')
                        {
                            timestamps
                            {
                                Utilities.runPS(this, "docker_v3/vc-theme-install.ps1", "-ThemePath ${env.WORKSPACE}\\CS\\theme -StorefrontContainer ${Utilities.getStorefrontContainer(this)}")
                            }
                        }
                        stage("Swagger Schema Validation")
                        {
                            timestamps
                            {
                                def swaggerSchemaPath = "${workspace}\\swaggerSchema${env.BUILD_NUMBER}.json"
                                Utilities.runPS(this, "docker_v3/vc-get-swagger.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -OutFile ${swaggerSchemaPath} -Verbose -Debug")
                                def swaggerResult = powershell script: "vc-build ValidateSwaggerSchema -SwaggerSchemaPath ${swaggerSchemaPath}", returnStatus: true
                                if(swaggerResult != 0)
                                {
                                    echo "Swagger Schema contains error"
                                }
                            }
                        }
                        stage("E2E")
                        {
                            timestamps
                            {
                                def e2eDir = "${env.WORKSPACE}\\e2e"
                                dir(e2eDir)
                                {
                                    git changelog: false, credentialsId: '38b768a3-7d9c-4203-9389-d6c6d8d6aff4', poll: false, url: 'https://github.com/VirtoCommerce/vc-quality-gate-katalon.git'
                                    def e2eStatus = 'success'
                                    try{
                                        powershell "${env.KATALON_DIR}\\katalonc.exe -projectPath=\"${e2eDir}\\platform_storefront.prj\" -testSuitePath=\"Test Suites/StorefrontPlatform\" -apiKey=\"${env.KATALON_API_KEY}\" -browserType=\"Chrome (headless)\" -g_StoreURL=\"http://localhost:${Utilities.getStorefrontPort(this)}\" -executionProfile=\"default\""
                                    }
                                    catch(any)
                                    {
                                        echo any.getMessage()
                                        e2eStatus = 'failed'
                                    }
                                    def platformPort = Utilities.getPlatformPort(this)
                                    def storefrontPort = Utilities.getStorefrontPort(this)
                                    def msg = "E2E ${e2eStatus}\nStorefront:\nhttp://ci.virtocommerce.com:${storefrontPort}\nPlatform:\nhttp://ci.virtocommerce.com:${platformPort}"
                                    input message: msg
                                }
                            }
                        }
                    }
                    else
                    {
                        stage('Create Test Environment'){timestamps{}}
                        stage('Install Modules'){timestamps{}}
                        stage('Install Sample Data'){timestamps{}}
                        stage('Theme Install'){timestamps{}}
                        stage("Swagger Schema Validation"){timestamps{}}
                        stage("E2E"){timestamps{}}
                    }
                }
            }
        }

        // stage("Create / Update Environment"){
        //     when {
        //         expression {
        //             UPDATE_CS
        //         }
        //     }
        //     steps {
        //         script{
        //             def resourceGroupName = SETTINGS['resourceGroupName']
        //             Utilities.createInfrastructure(this, "${resourceGroupName}")
        //         }
        //     }
        // }

        stage("Update Solution"){
            when {
                expression {
                    UPDATE_CS
                }
            }
            steps {
                script{
                    def csRoot = "${env.WORKSPACE}\\CS"
                    def webAppName = SETTINGS['webAppName']
                    def webAppPublicName = SETTINGS['webAppPublicName']
                    def resourceGroupName = SETTINGS['resourceGroupName']
                    def subscriptionID = SETTINGS['subscriptionID']
                    def blobToken = SETTINGS['blobToken']
                    def themeSrcDir = "${csRoot}\\theme"
                    def themeBlobPath = ""
                    def themeBlobPathParam = ""
                    // if(SETTINGS['themeName'] != null)
                    // {
                    //     themeBlobPath = "Themes/${SETTINGS['themeName']}"
                    //     themeSrcDir = "${themeSrcDir}\\${SETTINGS['themeName']}"
                    //     themeBlobPathParam = "-ThemeBlobPath ${themeBlobPath}"
                    // }
                    withEnv(["AzureBlobToken=${blobToken}"]){
                        Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                            "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${themeSrcDir} -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID} -StorageAccount ${SETTINGS['storageAccount']} -BlobContainerName ${SETTINGS['blobContainerName']} ${themeBlobPathParam}")
                    }
                }
            }
        }
    }
    post{
        always{
            script{
                dir(Utilities.getComposeFolderV3(this))
                {
                    def platformPort = Utilities.getPlatformPort(this)
                    def storefrontPort = Utilities.getStorefrontPort(this)
                    def sqlPort = Utilities.getSqlPort(this)
                    withEnv(["PLATFORM_DOCKER_TAG=3.0-preview", "STOREFRONT_DOCKER_TAG=latest", "DOCKER_PLATFORM_PORT=${platformPort}", "DOCKER_STOREFRONT_PORT=${storefrontPort}", "DOCKER_SQL_PORT=${sqlPort}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
                        bat "docker-compose down -v"
                    }
                }
                if(UNSTABLE && currentBuild.result != 'FAILED'){
                    currentBuild.result = 'UNSTABLE'
                    Utilities.checkLogForWarnings(this)
                }
                Utilities.notifyBuildStatus(this, env.TEAMS_HOOK, "", currentBuild.result)
                
                if(CAUSES.size() > 0){
                    echo "UNSTABLE's Causes:"
                    for(cause in CAUSES){
                        echo cause
                    }
                }
            }
        }
    }
}
def isDockerRegion(REGION, BRANCH_NAME){
    if(REGION == 'demo3' && BRANCH_NAME == 'dev'){
        return true
    }
    return false
}
def runPS(psName, args){
    def psPath = libraryResource "delivery/${psName}"
    echo "dbg: ${psPath} ${args}"
    powershell "${psPath} ${args} -ErrorAction Stop"
}

def getVirtoModules() {
    def modulesJsonUrl = "https://raw.githubusercontent.com/VirtoCommerce/vc-modules/master/modules.json"
    def response = httpRequest httpMode:'GET', responseHandle: 'STRING', url:modulesJsonUrl
    def content = response.content
    return new JsonSlurperClassic().parseText(content)
}

def downloadVirtoModule(url, path){
    httpRequest acceptType: 'APPLICATION_OCTETSTREAM', httpMode: 'GET', outputFile: path, responseHandle: 'NONE', url: url
}

def getDeliveryInfo() {
    def deliveryFile = readFile("C:\\CICD\\delivery.json")
    return new JsonSlurperClassic().parseText(deliveryFile)
}

def updateDeliveryInfo(data){
    def json = groovy.json.JsonOutput.toJson(data)
    json = groovy.json.JsonOutput.prettyPrint(json)
    writeFile(file:"C:\\CICD\\delivery.json", text: json)
}
