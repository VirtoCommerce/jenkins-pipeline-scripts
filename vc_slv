import jobs.scripts.*
def GHRelease = library('virto-shared-library').jobs.scripts.GithubRelease
import groovy.json.JsonSlurperClassic

def SETTINGS

def BRANCH_NAME
def BASE_BRANCH
def DELIVERY_AZURE = false

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT
def DOCKER_PREFIX
def DOCKER_TAG

def STOREFRONT_INSTALL

pipeline
{
    agent any

    options
    {
        timestamps()
    }

    stages
    {
        stage("User Input")
        {
            steps
            {
                script
                {
                    wakeUpNode("slave")
                    node("slave")
                    {
                        checkout scm
                        configFileProvider([configFile(fileId: 'virtocommerce', variable: 'SETTINGS_FILE')]) {
                            SETTINGS = new Settings(readFile(SETTINGS_FILE))
                        }
                        SETTINGS.setRegion("virtocommerce")
                        SETTINGS.setEnvironment("dev")

                        echo "*settings*: "
                        echo SETTINGS['agentLabel']
                        echo SETTINGS['composeDir']

                        def branches = Utilities.getSubfolders("${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}").join("\n")
                        def userInput = input message: "Select Branch", parameters: 
                        [
                            choice(name:'Source Branch', choices:SETTINGS['sourceBranches']),
                            choice(name:'Target Branch', choices:branches),
                            booleanParam(defaultValue: false, name: 'Delviery to Azure')
                        ]
                        BASE_BRANCH = userInput["Source Branch"]
                        BRANCH_NAME = userInput["Target Branch"]
                        DELIVERY_AZURE = userInput["Delivery to Azure"]
                        echo "Source Branch: ${BASE_BRANCH}; Target Branch: ${BRANCH_NAME};"
                    }
                }
            }
        }

        stage("Preparing Solution")
        {
            steps
            {
                script
                {
                    node(SETTINGS['agentLabel'])
                    {
                        echo "*Get-repos-to-cs*"
                    }
                }
            }
        }

        stage("Docker Environment")
        {
            steps
            {
                script
                {
                    node(SETTINGS['agentLabel'])
                    {
                        stage('Create Test Environment')
                        {
                            timestamps 
                            { 
                                // Start docker environment
                                def composeFolder = "${env.WORKSPACE}@libs\\${SETTINGS['composeDir']}"
                                dir(composeFolder)
                                {
                                    DOCKER_SQL_PORT = Utilities.getSqlPort(this)
                                    DOCKER_PLATFORM_PORT = Utilities.getPlatformPort(this)
                                    DOCKER_STOREFRONT_PORT = Utilities.getStorefrontPort(this)
                                    DOCKER_PREFIX = 'vc'
                                    switch(BASE_BRANCH)
                                    {
                                        case 'dev':
                                        DOCKER_TAG = 'dev-branch'
                                        break
                                        case 'master':
                                        DOCKER_TAG = 'latest'
                                        break
                                    }

                                    echo "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}, DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}, DOCKER_SQL_PORT=${DOCKER_SQL_PORT}"
                                    // 1. stop containers
                                    // 2. remove instances including database
                                    // 3. start up new containers
                                    withEnv(["DOCKER_TAG=${DOCKER_TAG}", "DOCKER_PREFIX=${DOCKER_PREFIX}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"])
                                    {
                                        bat "docker-compose stop"
                                        bat "docker-compose rm -f -v"
                                        bat "docker-compose up -d"
                                    }
                                }			
                            }
                        }
                        stage('Install Modules')
                        {
                            timestamps
                            {
                                def platformContainer = Utilities.getPlatformContainer(this)
                                def backendFeaturesDir = new File("${VCCOM_SETTINGS_PATH}\\backend")
                                if(backendFeaturesDir.exists())
                                {
                                    echo "Copy features to the platform container"
                                    powershell "\$files = Get-ChildItem ${backendFeaturesDir.toString()} -Recurse; foreach(\$file in \$files){ docker cp \$file.fullname ${platformContainer}:/vc-platform/ }"
                                }
                                // install modules
                                Utils.runPS('qaenv/install-modules.ps1', "-ApiUrl \"${Utilities.getPlatformHost(this)}\" -PlatformContainer ${platformContainer} -ModulesDir ${env.WORKSPACE}\\CS\\modules")
                            }
                        }
                        stage('Install Sample Data')
                        {
                            timestamps
                            {
                                def sampleDataSrcParam = ""
                                if(SETTINGS['sampledata'] != null){
                                    sampleDataSrcParam = "-sampleDataSrc ${SETTINGS['sampledata']}"
                                    echo "using url from settings file"
                                }
                                Utils.runPS("vc-setup-sampledata.ps1", "-apiurl \"http://localhost:${DOCKER_PLATFORM_PORT}\" ${sampleDataSrcParam} -Verbose -Debug")
                            }
                        }
                        stage('Storefront Install')
                        {
                            timestamps
                            {
                                if(STOREFRONT_INSTALL)
                                {
                                    def storefrontContainer = Utilities.getStorefrontContainer(this)
                                    def storefrontDir = "${env.WORKSPACE}\\CS\\storefront"
                                    //bat "docker exec ${storefrontContainer} cmd /c \"rmdir /S /Q C:\\vc-storefront\""
                                    bat "docker stop ${storefrontContainer}"
                                    bat "docker cp ${storefrontDir} ${storefrontContainer}:/vc-storefront/."
                                    bat "docker start ${storefrontContainer}"
                                }
                            }
                        }
                        stage('Theme Install')
                        {
                            timestamps 
                            {
                                def storefrontContainer = Utilities.getStorefrontContainer(this)
                                def themeFolder = "${env.WORKSPACE}\\CS\\theme\\vccom"
                                Utils.runPS("install-vccom-theme.ps1", "-ThemePath \"${themeFolder}\" -Container ${storefrontContainer}")
                            }
                        }
                        
                        stage('Awaiting Proceed'){
                            def message = "Platform url: ${SETTINGS["platformContainerUrl"]}:${DOCKER_PLATFORM_PORT}\nStorefront: ${SETTINGS["storefrontContainerUrl"]}:${DOCKER_STOREFRONT_PORT}"
                            input(message)
                        }
                    }
                }
            }
        }
    }

    post
    {
        always
        {
            script
            {
                echo "*settings-post*: "
                echo SETTINGS['agentLabel']
                echo SETTINGS['composeDir']
                
                node(SETTINGS['agentLabel')
                {
                    def composeFolder = "${env.WORKSPACE}@libs\\${SETTINGS["composeDir"]}"
                    // dir(composeFolder)
                    // {
                    //     withEnv(["DOCKER_TAG=${DOCKER_TAG}", "DOCKER_PREFIX=${DOCKER_PREFIX}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]){
                    //         bat "docker-compose down -v"
                    //     }
                    //     bat "docker image prune -f"
                    // }
                }
            }
        }
    }
}

def wakeUpNode(nodeLabel)
{
    try
    {
        node(nodeLabel)
        {
            echo "${nodeLabel} is up!"
        }
    }
    catch(any)
    {
        echo any.getMessage()
    }
}
