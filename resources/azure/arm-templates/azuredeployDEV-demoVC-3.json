{
	"$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
  "parameters": {
    "appServicePlanName_StoreFront": {
      "type": "string",
      "metadata": {
        "description": "The name of application service plan to create"
      }
    },
    "appInsights_StoreFront": {
      "type": "string",
      "metadata": {
        "description": "The name of the appinsights to create"
      }
    },
    "webAppName_StoreFront": {
      "type": "string",
      "metadata": {
        "description": "The name of the web app to create"
      }
    },
    "virtoCommerceEndpointURL": {
      "type": "string",
      "metadata": {
        "description": "The name of the endpoint url"
      }
    },
    "virtoCommerceEnvironment": {
      "type": "string",
      "metadata": {
        "description": "The type of the environment"
      }
    },
    "virtoCommerceImpersonateApiKey": {
      "type": "string",
      "metadata": {
        "description": "The name of the endpoint url"
      }
    },
    "webAppSlotName_StoreFront": {
      "type": "string",
      "defaultValue": "staging",
      "metadata": {
        "description": "The name of the web app slot to create"
      }
    },
    "sqlServerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the SQL server to create"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The admin user of the SQL Server"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin user of the SQL Server"
      }
    },
    "sqlDatabaseName": {
      "type": "string",
      "metadata": {
        "description": "The name of the database to create"
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account to create"
      }
    },
    "searchServiceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the search service to create"
      }
    },
    "searchServiceScope": {
      "type": "string",
      "metadata": {
        "description": "The name of the search service scope to create"
      }
    },
    "cacheName": {
      "type": "string",
      "metadata": {
        "description": "The name of the redis cache to create"
      }
    },
    "cacheRedisChannelName_Backend": {
      "type": "string",
      "metadata": {
        "description": "The name of the redis cache channel to create"
      }
    },
    "appServicePlanName_Backend": {
      "type": "string",
      "metadata": {
        "description": "The name of application service plan to create"
      }
    },
    "appInsights_Backend": {
      "type": "string",
      "metadata": {
        "description": "The name of the appinsights to create"
      }
    },
    "webAppName_Backend": {
      "type": "string",
      "metadata": {
        "description": "The name of the web app to create"
      }
    },
    "azureADApplicationId": {
      "type": "string",
      "metadata": {
        "description": "The application ID of the Azure AD app"
      }
    },
    "azureADEnabled": {
      "type": "string",
      "defaultValue": "false",
      "metadata": {
        "description": "The status of Azure AD authentification"
      }
    },
    "azureADTenantId": {
      "type": "string",
      "metadata": {
        "description": "The tenant ID of the Azure AD app"
      }
    },
    "timeZoneId": {
      "type": "string",
      "defaultValue": "W. Europe Standard Time",
      "metadata": {
        "description": "Backend - TimeZoneId"
      }
    },
    "webAppSlotName_Backend": {
      "type": "string",
      "defaultValue": "staging",
      "metadata": {
        "description": "The name of the web app slot to create"
      }
    }
  },
  "variables": {
    "sqlDatabaseCollation": "SQL_Latin1_General_CP1_CI_AS",
    "sqlServerResourceId": "[concat(resourcegroup().Id, '/providers/Microsoft.Sql/servers/', parameters('sqlServerName'))]",
    "sqlFQDN": "[concat(parameters('sqlServerName'), '.database.windows.net')]",
    "storageAccountType": "Standard_LRS",
    "storageProvider": "AzureBlobStorage"
  },
  "resources": [
    {
      "name": "[parameters('appInsights_StoreFront')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "kind": "web",
      "location": "[resourceGroup().location]",
      "properties": {
        "ApplicationId": "[parameters('appInsights_StoreFront')]",
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest"
      },
      "tags": {
        "displayName": "applicationInsights"
      }
    },
    {
      "name": "[parameters('webAppName_StoreFront')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "webApp_storefront"
      },
      "dependsOn": [ "[resourceId('Microsoft.Insights/components/', parameters('appinsights_StoreFront'))]" ],
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName_StoreFront'))]",
        "siteConfig": {
          "requestTracingEnabled": true,
          "requestTracingExpirationTime": "9999-12-31T23:59:00Z",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 100,
          "detailedErrorLoggingEnabled": true,
          "clientAffinityEnabled": true,
          "use32BitWorkerProcess": false,
          "webSocketsEnabled": true,
          "alwaysOn": true,
          "httpsOnly": true,
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnetcore"
            }
          ],
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('Microsoft.Insights/components/', parameters('appInsights_StoreFront')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "Development"
            },
            {
              "name": "AzureAD:ClientId",
              "value": "[parameters('azureADApplicationId')]"
            },
            {
              "name": "AzureAD:Enabled",
              "value": "[parameters('azureADEnabled')]"
            },
            {
              "name": "AzureAD:TenantId",
              "value": "[parameters('azureADTenantId')]"
            },
            {
              "name": "IdentityOptions:Password:RequiequireUppercase",
              "value": "true"
            },
            {
              "name": "IdentityOptions:Password:RequireDigit",
              "value": "true"
            },
            {
              "name": "IdentityOptions:Password:RequiredLength",
              "value": "8"
            },
            {
              "name": "IdentityOptions:Password:RequireLowercase",
              "value": "true"
            },
            {
              "name": "IdentityOptions:Password:RequireNonAlphanumeric",
              "value": "true"
            },
            {
              "name": "VirtoCommerce:CacheSlidingExpiration",
              "value": "0:15:0"
            },
            {
              "name": "VirtoCommerce:Endpoint:Url",
              "value": "[parameters('virtoCommerceEndpointURL')]"
            },
            {
              "name": "VirtoCommerce:Endpoint:UserName",
              "value": "frontend"
            },
            {
              "name": "VirtoCommerce:Environment",
              "value": "[parameters('virtoCommerceEnvironment')]"
            },
            {
              "name": "VirtoCommerce:ImpersonateApiKey",
              "value": "[parameters('virtoCommerceImpersonateApiKey')]"
            }
          ],
          "connectionStrings": [
            {
              "name": "ContentConnectionString",
              "connectionString": "[concat('Server=tcp:', variables('sqlFQDN'), ',1433;Initial Catalog=', parameters('sqlDatabaseName'), ';Persist Security Info=False;User Id=', parameters('sqlAdministratorLogin'), '@', parameters('sqlserverName'), ';Password=', parameters('sqlAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=300;')]",
              "type": "SQLAzure"
            }
          ]
        }
      },
      "resources": []
    },
    {
      "name": "[concat(parameters('sqlserverName'), '/', parameters('sqlDatabaseName'))]",
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2017-10-01-preview",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "database"
      },
      "properties": {
        "collation": "[variables('sqlDatabaseCollation')]"
      }
    },
    {
      "name": "[parameters('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "displayName": "storageAccount"
      }
    },
    {
      "name": "[parameters('appInsights_Backend')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "kind": "web",
      "location": "[resourceGroup().location]",
      "properties": {
        "ApplicationId": "[parameters('appInsights_Backend')]",
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest"
      },
      "tags": {
        "displayName": "applicationInsights"
      }
    },
    {
      "name": "[parameters('webAppName_Backend')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "webApp_backend"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components/', parameters('appinsights_Backend'))]"
      ],
      "properties": {
        "enabled": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName_Backend'))]",
        "siteConfig": {
          "requestTracingEnabled": true,
          "requestTracingExpirationTime": "9999-12-31T23:59:00Z",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 100,
          "detailedErrorLoggingEnabled": true,
          "clientAffinityEnabled": true,
          "use32BitWorkerProcess": false,
          "alwaysOn": true,
          "httpsOnly": true,
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnetcore"
            }
          ],
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('Microsoft.Insights/components/', parameters('appInsights_Backend')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "Development"
            },
            {
              "name": "Assets:AzureBlobStorage:ConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',concat(listKeys(parameters('storageAccountName'),'2015-05-01-preview').key1))]"
            },
            {
              "name": "Assets:Provider",
              "value": "[variables('storageProvider')]"
            },
            {
              "name": "AzureAD:ApplicationId",
              "value": "[parameters('azureADApplicationId')]"
            },
            {
              "name": "AzureAD:Enabled",
              "value": "[parameters('azureADEnabled')]"
            },
            {
              "name": "AzureAd:MetadataAddress",
              "value": ""
            },
            {
              "name": "AzureAD:TenantId",
              "value": "[parameters('azureADTenantId')]"
            },
            {
              "name": "Caching:Redis:ChannelName",
              "value": "[parameters('cacheRedisChannelName_Backend')]"
            },
            {
              "name": "Content:AzureBlobStorage:ConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',concat(listKeys(parameters('storageAccountName'),'2015-05-01-preview').key1))]"
            },
            {
              "name": "Content:AzureBlobStorage:RootPath",
              "value": "cms"
            },
            {
              "name": "Content:Provider",
              "value": "[variables('storageProvider')]"
            },
            {
              "name": "IdentityOptions:Password:RequireDigit",
              "value": "true"
            },
            {
              "name": "IdentityOptions:Password:RequiredLength",
              "value": "8"
            },
            {
              "name": "IdentityOptions:Password:RequireLowercase",
              "value": "true"
            },
            {
              "name": "IdentityOptions:Password:RequireNonAlphanumeric",
              "value": "true"
            },
            {
              "name": "IdentityOptions:Password:RequireUppercase",
              "value": "true"
            },
            {
              "name": "IdentityOptions:User:AllowedUserNameCharacters",
              "value": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 -._@+"
            },
            {
              "name": "IdentityOptions:User:RequireUniqueEmail",
              "value": "false"
            },
            {
              "name": "Search:AzureSearch:Key",
              "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('searchServiceName')),'2015-08-19').primaryKey]"
            },
            {
              "name": "Search:AzureSearch:SearchServiceName",
              "value": "[parameters('searchServiceName')]"
            },
            {
              "name": "Search:Provider",
              "value": "AzureSearch"
            },
            {
              "name": "Search:Scope",
              "value": "[parameters('searchServiceScope')]"
            },
            {
              "name": "VirtoCommerce:DiscoveryPath",
              "value": "../modules"
            },
            {
              "name": "VirtoCommerce:RefreshProbingFolderOnStart",
              "value": "false"
            }
          ],
          "connectionStrings": [
            {
              "name": "VirtoCommerce",
              "connectionString": "[concat('Server=tcp:', variables('sqlFQDN'), ',1433;Initial Catalog=', parameters('sqlDatabaseName'), ';Persist Security Info=False;User Id=', parameters('sqlAdministratorLogin'), '@', parameters('sqlserverName'), ';Password=', parameters('sqlAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=300;')]",
              "type": "SQLAzure"
            },
            {
              "name": "RedisConnectionString",
              "connectionString": "[concat(parameters('cacheName'),'.redis.cache.windows.net:6380,abortConnect=false,ssl=True,allowAdmin=True,password=', listKeys(resourceId('Microsoft.Cache/Redis', parameters('cacheName')),'2016-04-01').primaryKey)]",
              "type": "Custom"
            }
          ],
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot\\platform",
              "preloadEnabled": false,
              "virtualDirectories": [
                {
                  "virtualPath": "/modules",
                  "physicalPath": "site\\wwwroot\\modules"
                }
              ]
            }
          ]
        }
      },
      "resources": []
    }
  ],
	"outputs": {
	}
}