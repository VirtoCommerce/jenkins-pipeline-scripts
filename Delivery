
import groovy.util.*
import groovy.json.JsonSlurperClassic

def globalLib = library('global-shared-lib').com.test
def Utilities = globalLib.Utilities
def Packaging = globalLib.Packaging
def Modules = globalLib.Modules
def Settings = globalLib.Settings

def SETTINGS

def DELIVERY_BACKEND = false
def DELIVERY_FRONTEND = false
def DELIVERY_THEME = false
def UPDATE_CS = false
def UPDATE_PLATFORM = false
def UPDATE_IMAGE = false
def UPDATE_MODULE = false
def LOGIC_APPS = false

def UNSTABLE = false
def CAUSES = []

def REGION
def BRANCH_NAME
def ENV_NAME

def PLATFORM_VERSION
def PROJECT_TYPE
def BACKEND_FILE
def FRONTEND_FILE
def THEME_FILE
def MODULE_ID
def MODULE_FILE
def LOGICAPP_FILE
def LOGICAPP_NAME

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT
def DOCKER_PREFIX
def DOCKER_TAG

def PROJECT_TYPES


pipeline {
    agent any

    options{
        timestamps()
    }
    
    stages{
        stage("User Input"){
            steps{
                script{
                    def settingsFileContent
                    configFileProvider([configFile(fileId: 'delivery_settings', variable: 'SETTINGS_FILE')]) {
                        settingsFileContent = readFile(SETTINGS_FILE)
                    }
                    SETTINGS = Settings.new(settingsFileContent)
                    def regionChoices = SETTINGS.getProjects().join("\n")
                    def buildOrder = Utilities.getNextBuildOrder(this)
                    def userInputRegion = input message: "Select Region", parameters: [
                        choice(name: 'Region', choices: regionChoices)
                    ]
                    PROJECT_TYPE = 'SOLUTION'
                    REGION = userInputRegion
                    UPDATE_CS = true
                    SETTINGS.setProject(REGION)

                    def envChoices = SETTINGS.getBranches().join("\n")
                    def userEnvInput = input message: "Select Environment", parameters: [
                        choice(name: 'Environments', choices: envChoices)
                    ]
                    ENV_NAME = userEnvInput
                    SETTINGS.setBranch(ENV_NAME)
                    
                    def userInputBranch
                    def branchesArr = SETTINGS['branch'] as String[]
                    if(branchesArr.size() > 1)
                    {
                        userInputBranch = input message: "Select Branch", parameters: [
                            choice(name: 'Branch', choices: branchesArr.join("\n"))
                        ]
                    }
                    else
                    {
                        userInputBranch = branchesArr.first()
                    }

                    BRANCH_NAME = userInputBranch
                    echo "Vars: REGION - ${REGION}, UPDATE_CS - ${UPDATE_CS}, ENV_NAME - ${ENV_NAME}, BRANCH_NAME - ${BRANCH_NAME}"
                    def msgToHook = "Delivery Parameters: ${REGION}<br/>Environment ${ENV_NAME}<br/>Branch Name: ${BRANCH_NAME}<br/>${UPDATE_CS ? "Update Solution<br/>":""}"
                    Utilities.notifyBuildStatus(this, env.TEAMS_HOOK, msgToHook, 'STARTED')
                }
            }
        }

        

        stage("Preparing Solution"){
            when{
                expression {
                    UPDATE_CS
                }
            }
            steps{
                script{
                    checkout scm
                    def solutionRoot = "${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}"
                    def csSrc = "${solutionRoot}\\${BRANCH_NAME}"
                    def modulesRoot = "${env.WORKSPACE}\\CS\\module"
                    def platformRoot = "${env.WORKSPACE}\\CS\\platform"
                    powershell script: "Remove-Item -Path ${env.WORKSPACE}\\CS\\* -Recurse -Force -ErrorAction Continue", label: "Clean Workspace"
                    if(BRANCH_NAME == 'support_2.x' || BRANCH_NAME == 'support_2.x-dev' || BRANCH_NAME == 'dev' || BRANCH_NAME == 'master')
                    {
                        //theme
                        def themeIncludeParam = ''
                        def themeSrc = "${solutionRoot}\\${SETTINGS['themeBranch']}\\theme"
                        def themeDst = "${env.WORKSPACE}\\CS\\theme"
                        if(SETTINGS['themeName'] != '' && SETTINGS['themeName'] != null)
                        {
                            themeIncludeParam = "-Include ${SETTINGS['themeName'].join(',')}"
                        }
                        powershell script: "mkdir ${themeDst}"
                        powershell script: "Copy-Item -Path ${themeSrc}\\* ${themeIncludeParam} -Destination ${themeDst} -Recurse -Force", label: "Copy Theme to Workspace"
                        //storefront
                        def storefrontSrc = "${solutionRoot}\\${SETTINGS['storefrontBranch']}"
                        powershell script: "Copy-Item -Path ${storefrontSrc}\\* -Destination ${env.WORKSPACE}\\CS -Include storefront -Recurse -Force", label: "Copy Storefron to Workspace"
                    } 
                    else if(BRANCH_NAME == 'feature_migrate-to-vc30')
                    {
                        Utilities.runSharedPS(this, 'delivery/get-backend.ps1', "-BackendPath ${env.WORKSPACE}\\CS -AppName ${SETTINGS['webAppName']} -ResourceGroupName ${SETTINGS['resourceGroupName']} -SubscriptionID ${SETTINGS['subscriptionID']}")
                        powershell "Rename-Item -Path ${env.WORKSPACE}\\CS\\modules -NewName module"
                    }
                    powershell script: "Copy-Item -Path ${csSrc}\\* -Destination ${env.WORKSPACE}\\CS -Recurse -Force", label: "Copy Solution to Workspace"
                    powershell "Rename-Item -Path ${modulesRoot} -NewName Modules"
                    if(BRANCH_NAME == 'feature_migrate-to-vc30')
                        powershell script: "Copy-Item -Path ${env.SOLUTION_FOLDER}\\vc\\${BRANCH_NAME}\\module\\* -Destination ${env.WORKSPACE}\\CS\\modules -Recurse -Force", label: "Copy vc modules to Workspace/modules"
                }
            }
        }

        stage("Docker Environment")
        {
            when
            {
                expression{
                    return REGION == 'demo3' && BRANCH_NAME == 'dev'
                }
            }
            steps
            {
                script
                {
                    stage('Create Test Environment')
                    {
                        timestamps
                        {
                            dir(Utilities.getComposeFolderV3(this))
                            {
                                def platformTag
                                def storefrontTag
                                switch(BRANCH_NAME)
                                {
                                    case 'dev':
                                    platformTag = '3.0-dev'
                                    storefrontTag = '3.0-dev'
                                    break
                                    case 'master':
                                    platformTag = '3.0'
                                    storefrontTag = '3.0'
                                    break
                                }
                                def platformPort = Utilities.getPlatformPort(this)
                                def storefrontPort = Utilities.getStorefrontPort(this)
                                def sqlPort = Utilities.getSqlPort(this)
                                withEnv(["PLATFORM_DOCKER_TAG=3.0-dev", "STOREFRONT_DOCKER_TAG=3.0-dev", "DOCKER_PLATFORM_PORT=${platformPort}", "DOCKER_STOREFRONT_PORT=${storefrontPort}", "DOCKER_SQL_PORT=${sqlPort}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
                                    bat "docker-compose up -d"
                                }
                            }
                        }
                    }
                    stage('Install Modules')
                    {
                        timestamps
                        {
                            def platformHost = Utilities.getPlatformCoreHost(this)
                            def platformContainerId = Utilities.getPlatformContainer(this)
                            echo "Platform Host: ${platformHost}"
                            Utilities.runPS(this, "docker_v3/vc-setup-modules.ps1", "-ApiUrl ${platformHost} -NeedRestart -ContainerId ${platformContainerId} -Verbose -Debug")
                            Utilities.runPS(this, "docker_v3/vc-check-installed-modules.ps1", "-ApiUrl ${platformHost} -Verbose -Debug")
                        }
                    }
                    stage('Install Sample Data')
                    {
                        timestamps
                        {
                            Utilities.runPS(this, "docker_v3/vc-setup-sampledata.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -Verbose -Debug")
                        }
                    }
                    stage('Theme Install')
                    {
                        timestamps
                        {
                            Utilities.runPS(this, "docker_v3/vc-theme-install.ps1", "-ThemePath ${env.WORKSPACE}\\CS\\theme -StorefrontContainer ${Utilities.getStorefrontContainer(this)}")
                        }
                    }
                    stage("Swagger Schema Validation")
                    {
                        timestamps
                        {
                            def swaggerSchemaPath = "${workspace}\\swaggerSchema${env.BUILD_NUMBER}.json"
                            Utilities.runPS(this, "docker_v3/vc-get-swagger.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -OutFile ${swaggerSchemaPath} -Verbose -Debug")
                            def swaggerResult = powershell script: "vc-build ValidateSwaggerSchema -SwaggerSchemaPath ${swaggerSchemaPath}", returnStatus: true
                            if(swaggerResult != 0)
                            {
                                echo "Swagger Schema contains error"
                            }
                        }
                    }
                    stage("E2E")
                    {
                        timestamps
                        {
                            def e2eDir = "${env.WORKSPACE}\\e2e"
                            dir(e2eDir)
                            {
                                git changelog: false, credentialsId: '38b768a3-7d9c-4203-9389-d6c6d8d6aff4', poll: false, url: 'https://github.com/VirtoCommerce/vc-quality-gate-katalon.git'
                                def e2eStatus = 'success'
                                try{
                                    powershell "${env.KATALON_DIR}\\katalonc.exe -projectPath=\"${e2eDir}\\platform_storefront.prj\" -testSuitePath=\"Test Suites/StorefrontPlatform\" -apiKey=\"${env.KATALON_API_KEY}\" -browserType=\"Chrome (headless)\" -g_StoreURL=\"http://localhost:${Utilities.getStorefrontPort(this)}\" -executionProfile=\"default\""
                                }
                                catch(any)
                                {
                                    echo any.getMessage()
                                    e2eStatus = 'failed'
                                }
                                def platformPort = Utilities.getPlatformPort(this)
                                def storefrontPort = Utilities.getStorefrontPort(this)
                                def msg = "E2E ${e2eStatus}\nStorefront:\nhttp://ci.virtocommerce.com:${storefrontPort}\nPlatform:\nhttp://ci.virtocommerce.com:${platformPort}"
                                input message: msg
                            }
                        }
                    }
                }
            }
        }

        stage("Create / Update Environment"){
            when {
                expression {
                    UPDATE_CS
                }
            }
            steps {
                script{
                    def resourceGroupName = SETTINGS['resourceGroupName']
                    Utilities.createInfrastructure(this, "${resourceGroupName}")
                }
            }
        }

        stage("Update Solution"){
            when {
                expression {
                    UPDATE_CS
                }
            }
            steps {
                script{
                    def csRoot = "${env.WORKSPACE}\\CS"
                    def webAppName = SETTINGS['webAppName']
                    def webAppPublicName = SETTINGS['webAppPublicName']
                    def resourceGroupName = SETTINGS['resourceGroupName']
                    def subscriptionID = SETTINGS['subscriptionID']
                    def blobToken = SETTINGS['blobToken']
                    def themeSrcDir = "${csRoot}\\theme"
                    def themeBlobPath = ""
                    def themeBlobPathParam = ""
                    // if(SETTINGS['themeName'] != null)
                    // {
                    //     themeBlobPath = "Themes/${SETTINGS['themeName']}"
                    //     themeSrcDir = "${themeSrcDir}\\${SETTINGS['themeName']}"
                    //     themeBlobPathParam = "-ThemeBlobPath ${themeBlobPath}"
                    // }
                    withEnv(["AzureBlobToken=${blobToken}"]){
                        Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                            "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${themeSrcDir} -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID} -StorageAccount ${SETTINGS['storageAccount']} -BlobContainerName ${SETTINGS['blobContainerName']} ${themeBlobPathParam}")
                    }
                }
            }
        }
        
        // stage("Delivering Backend"){
        //     when{
        //         expression{
        //             DELIVERY_BACKEND
        //         }
        //     }
        //     steps{
        //         script{
        //             if(ENV_NAME == 'ACC'){
        //                 echo "Octopus api: ${env.OCTOPUS_USR}"
        //                 def res = powershell script: "${env.Utils}\\octopus\\octo.exe push --package ${BACKEND_FILE} --server ${env.OCTOPUS_USR} --apiKey ${env.OCTOPUS_PSW}", returnStatus:true
        //                 if(res != 0){
        //                     UNSTABLE = true
        //                     CAUSES.add("Delivering Backend: octopus failed")
        //                 }
        //             }
        //             else{
        //                 def contentPath = "platform"
        //                 if(DELIVERY_BACKEND)
        //                     contentPath = ""
        //                 runPS("Deploy-ToAzure.ps1", "-ZipFile ${BACKEND_FILE} -WebAppName \"${SETTINGS['webAppName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\" -DestContentPath \"${contentPath}\"")
        //             }
        //         }
        //     }
        // }
        // stage("Delivering Storefront"){
        //     when{
        //         expression
        //         {
        //             DELIVERY_FRONTEND
        //         }
        //     }
        //     steps{
        //         script{
        //             if(ENV_NAME == 'ACC'){
        //                 if(DELIVERY_BACKEND){
        //                     sleep time:5, unit:'MINUTES'
        //                 }
        //                 def res = powershell script:"${env.Utils}\\octopus\\octo.exe push --package ${FRONTEND_FILE} --server ${env.OCTOPUS_USR} --apiKey ${env.OCTOPUS_PSW}", returnStatus:true
        //                 if(res != 0){
        //                     UNSTABLE = true
        //                     CAUSES.add("Delivering Storefront: octopus failed")
        //                 }
        //             } else {
        //                 def tmpFrontendPath = "${env.WORKSPACE}@tmp\\frontendTemp"
        //                 dir(tmpFrontendPath){
        //                     deleteDir()
        //                     powershell "Expand-Archive -Path ${FRONTEND_FILE} -DestinationPath ."
        //                     powershell "Remove-Item ${FRONTEND_FILE} -Force"
        //                     powershell "Expand-Archive -Path ${THEME_FILE} -DestinationPath .\\wwwroot\\theme"
        //                     zip dir: tmpFrontendPath, zipFile: FRONTEND_FILE
        //                 }
        //                 runPS("Deploy-ToAzure.ps1", "-ZipFile ${FRONTEND_FILE} -WebAppName \"${SETTINGS['webAppPublicName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\"")
        //             }
        //         }
        //     }
        // }
        // stage("Delivering Theme"){
        //     when{
        //         expression{
        //             DELIVERY_THEME
        //         }
        //     }
        //     steps{
        //         script{
        //             if(ENV_NAME == 'ACC'){
        //                 if(DELIVERY_BACKEND){
        //                     sleep time:5, unit:'MINUTES'
        //                 }
        //                 def res = powershell script: "${env.Utils}\\octopus\\octo.exe push --package ${THEME_FILE} --server ${env.OCTOPUS_USR} --apiKey ${env.OCTOPUS_PSW}", returnStatus: true
        //                 if(res != 0){
        //                     UNSTABLE = true
        //                     CAUSES.add("Delivering Theme: octopus failed")
        //                 }
        //             } else {
        //                 runPS("Deploy-ToAzure.ps1", "-ZipFile ${THEME_FILE} -WebAppName \"${SETTINGS['webAppPublicName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\" -DestContentPath \"wwwroot\\theme\"")
        //             }
        //         }
        //     }
        // }

        // stage("Updating Platform"){
        //     when{
        //         expression{
        //             return UPDATE_PLATFORM && !DELIVERY_BACKEND
        //         }
        //     }
        //     steps{
        //         runPS("Deploy-ToAzure.ps1", "-ZipFile ${BACKEND_FILE} -WebAppName \"${SETTINGS['webAppName']}\" -ResourceGroupName \"${SETTINGS['resourceGroupName']}\" -SubscriptionID \"${SETTINGS['subscriptionID']}\" -DestContentPath \"platform\"")
        //     }
        // }

        // stage("Updating Module"){
        //     when{
        //         expression{
        //             UPDATE_MODULE
        //         }
        //     }
        //     steps{
        //         script{
        //             runPS("VC-Module2Azure.ps1", "-Prefix ${SETTINGS['prefix']} -ModuleName ${MODULE_ID} -Path2Zip ${MODULE_FILE} -BranchName ${ENV_NAME}")
        //         }
        //     }
        // }

        // stage("Updating Platform Docker Image"){
        //     when{
        //         expression{
        //             return UPDATE_IMAGE && ENV_NAME != 'None'
        //         }
        //     }
        //     steps{      
        //         script{  
        //             node(SETTINGS['agentLabel'] ?: 'master') {
        //                 deleteDir()       
        //                 unstash name: 'platform'
        //                 unzip zipFile: 'Platform.zip', dir: 'VirtoCommerce.Platform'
        //                 def dstConfigPath = "${env.WORKSPACE}\\VirtoCommerce.Platform\\platform\\Web.config"
        //                 def srcConfigPath = "${env.WORKSPACE}\\${SETTINGS['config']}"
        //                 powershell "${env.WORKSPACE}\\combine-configs.ps1 -srcConfigPath ${srcConfigPath} -dstConfigPath ${dstConfigPath} -ErrorAction Stop"
        //                 def dockerImage = docker.build("${SETTINGS['prefix']}-platform:${SETTINGS['dockerTag']}")
        //             }
        //         }
        //     }
        // }
        // stage('Preparing Logic Apps'){
        //     when{
        //         expression{
        //             LOGIC_APPS
        //         }
        //     }
        //     steps{
        //         script{
        //             def logicAppsDir = "${env.WORKSPACE}\\LogicApps"
        //             def logicAppsRoot = "${logicAppsDir}\\${SETTINGS['prefix']}-AzureResourceGroup"
        //             dir(logicAppsDir){
        //                 deleteDir()
        //                 git branch: 'dev', credentialsId: '58ec1dd6-95a5-42f1-afd9-cace1f5fa2dd', url: "https://github.com/heineken-order-transfer/${SETTINGS['prefix']}-logic-apps.git" 
                    
        //                 def apps = Utilities.getSubfolders(logicAppsRoot)
        //                 def logicApp = input message:"Select Logic App", parameters:[choice(name: 'logicApp', choices: apps.join("\n"))]
        //                 def appDir = "${logicAppsRoot}\\${logicApp}"
        //                 if(ENV_NAME == 'ACC'){
        //                     def deliveryInfo = getDeliveryInfo()
        //                     def logicAppVersion = "${deliveryInfo['LOGICAPPS'][PROJECT_TYPE][logicApp]['version']}.${deliveryInfo['LOGICAPPS'][PROJECT_TYPE][logicApp]['number']}" 
        //                     LOGICAPP_FILE = "${env.WORKSPACE}@tmp\\VirtoWay.B2BOrderTransfer.${PROJECT_TYPE}.LA-${logicApp}.deployer.${logicAppVersion}.zip"
        //                     deliveryInfo['LOGICAPPS'][PROJECT_TYPE][logicApp]['number']++
        //                     updateDeliveryInfo(deliveryInfo)
        //                     powershell "Rename-Item -Path ${appDir}\\LogicApp-${logicApp}.json -NewName DeploymentTemplate.json -Force"
        //                     powershell "Compress-Archive -Path ${appDir}\\DeploymentTemplate.json, ${appDir}\\DeploymentTemplate.param.*.json -DestinationPath ${LOGICAPP_FILE}"
        //                 }
        //                 else{
        //                     LOGICAPP_NAME = logicApp
        //                     LOGICAPP_FILE = appDir
        //                 }
        //             }
        //         }
        //     }
        // }
        // stage('Delivery Logic App'){
        //     when{
        //         expression{
        //             LOGIC_APPS
        //         }
        //     }
        //     steps{
        //         script{
        //             if(ENV_NAME == 'ACC'){
        //                 def res = powershell script: "${env.Utils}\\octopus\\octo.exe push --package ${LOGICAPP_FILE} --server ${env.OCTOPUS_USR} --apiKey ${env.OCTOPUS_PSW}", returnStatus: true
        //                 if(res != 0){
        //                     UNSTABLE = true
        //                     CAUSES.add("Delivering Logic App: octopus failed")
        //                 }
        //             }
        //             else{
        //                 def templateFile = "${LOGICAPP_FILE}\\LogicApp-${LOGICAPP_NAME}.json"
        //                 def envname = ENV_NAME.toLowerCase()
        //                 def templateParametersFile = "${LOGICAPP_FILE}\\LogicApp-${LOGICAPP_NAME}.parameters.${envname}.json"
        //                 powershell "${env.WORKSPACE}\\ps\\Deploy-LogicApps.ps1 -SubscriptionID ${SETTINGS['subscriptionID']} -ResourceGroupName ${SETTINGS['resourceGroupName']} -TemplateFile ${templateFile} -TemplateParametersFile ${templateParametersFile}"
        //             }
        //         }
        //     }
        // }
    }
    post{
        always{
            script{
                dir(Utilities.getComposeFolderV3(this))
                {
                    def platformPort = Utilities.getPlatformPort(this)
                    def storefrontPort = Utilities.getStorefrontPort(this)
                    def sqlPort = Utilities.getSqlPort(this)
                    withEnv(["PLATFORM_DOCKER_TAG=3.0-preview", "STOREFRONT_DOCKER_TAG=latest", "DOCKER_PLATFORM_PORT=${platformPort}", "DOCKER_STOREFRONT_PORT=${storefrontPort}", "DOCKER_SQL_PORT=${sqlPort}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]) {
                        bat "docker-compose down -v"
                    }
                }
                if(UNSTABLE && currentBuild.result != 'FAILED'){
                    currentBuild.result = 'UNSTABLE'
                    Utilities.checkLogForWarnings(this)
                }
                Utilities.notifyBuildStatus(this, env.TEAMS_HOOK, "", currentBuild.result)
                
                if(CAUSES.size() > 0){
                    echo "UNSTABLE's Causes:"
                    for(cause in CAUSES){
                        echo cause
                    }
                }
            }
        }
    }
}
def runPS(psName, args){
    def psPath = libraryResource "delivery/${psName}"
    echo "dbg: ${psPath} ${args}"
    powershell "${psPath} ${args} -ErrorAction Stop"
}

def getVirtoModules() {
    def modulesJsonUrl = "https://raw.githubusercontent.com/VirtoCommerce/vc-modules/master/modules.json"
    def response = httpRequest httpMode:'GET', responseHandle: 'STRING', url:modulesJsonUrl
    def content = response.content
    return new JsonSlurperClassic().parseText(content)
}

def downloadVirtoModule(url, path){
    httpRequest acceptType: 'APPLICATION_OCTETSTREAM', httpMode: 'GET', outputFile: path, responseHandle: 'NONE', url: url
}

def getDeliveryInfo() {
    def deliveryFile = readFile("C:\\CICD\\delivery.json")
    return new JsonSlurperClassic().parseText(deliveryFile)
}

def updateDeliveryInfo(data){
    def json = groovy.json.JsonOutput.toJson(data)
    json = groovy.json.JsonOutput.prettyPrint(json)
    writeFile(file:"C:\\CICD\\delivery.json", text: json)
}