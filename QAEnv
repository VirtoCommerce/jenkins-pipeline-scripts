import groovy.json.JsonSlurperClassic

def globalLib = library('global-shared-lib').com.test
def Utilities = globalLib.Utilities
def Packaging = globalLib.Packaging
def Modules = globalLib.Modules
def Settings = globalLib.Settings

def SETTINGS

def BRANCH_NAME
def BASE_BRANCH
def DELIVERY_AZURE = false

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT
def DOCKER_TAG

def STOREFRONT_INSTALL

pipeline
{
    agent any

    options
    {
        timestamps()
    }

    stages
    {
        stage("User Input")
        {
            steps
            {
                script
                {
                    checkout scm
                    // configFileProvider([configFile(fileId: 'qaenv', variable: 'SETTINGS_FILE')]) {
                    //     SETTINGS = Settings.new(readFile(SETTINGS_FILE))
                    // }
                    // SETTINGS.setProject("qaenv")
                    // SETTINGS.setBranch("master")
                    // def branches = Utilities.getSubfolders("${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}").join("\n")
                    // def userInput = input message: "Select Branch", parameters: 
                    // [
                    //     choice(name:'Source Branch', choices:SETTINGS['sourceBranches']),
                    //     choice(name:'Target Branch', choices:branches),
                    //     booleanParam(defaultValue: false, name: 'Delviery to Azure')
                    // ]
                    // BASE_BRANCH = userInput["Source Branch"]
                    // BRANCH_NAME = userInput["Target Branch"]
                    // DELIVERY_AZURE = userInput["Delivery to Azure"]
                    // echo "Source Branch: ${BASE_BRANCH}; Target Branch: ${BRANCH_NAME};"
                    def settingsFileContent
                    configFileProvider([configFile(fileId: 'delivery_settings', variable: 'SETTINGS_FILE')]) {
                        settingsFileContent = readFile(SETTINGS_FILE)
                    }
                    SETTINGS = Settings.new(settingsFileContent)
                    def regionChoices = SETTINGS.getProjects().join("\n")
                    def buildOrder = Utilities.getNextBuildOrder(this)
                    def userInputRegion = input message: "Select Region", parameters: [
                        choice(name: 'Region', choices: regionChoices)
                    ]
                    PROJECT_TYPE = 'SOLUTION'
                    REGION = userInputRegion
                    UPDATE_CS = true
                    SETTINGS.setProject(REGION)

                    def envChoices = SETTINGS.getBranches().join("\n")
                    def userEnvInput = input message: "Select Environment", parameters: [
                        choice(name: 'Environments', choices: envChoices)
                    ]
                    ENV_NAME = userEnvInput
                    SETTINGS.setBranch(ENV_NAME)
                    
                    def srcBranches = SETTINGS['branch'] as String[]
                    def targetBranches = Utilities.getSubfolders("${env.SOLUTION_FOLDER}\\vc").join("\n")
                    def userInputBranch = input message: "Select Branch", parameters: [
                            choice(name:'Source Branch', choices:srcBranches),
                            choice(name:'Target Branch', choices:targetBranches)
                        ]

                    BRANCH_NAME = userInputBranch
                    echo "Vars: REGION - ${REGION}, UPDATE_CS - ${UPDATE_CS}, ENV_NAME - ${ENV_NAME}, BASE_BRANCH - ${BASE_BRANCH}, BRANCH_NAME - ${BRANCH_NAME}"
                }
            }
        }
        stage("Preparing Solution"){
            steps
            {
                script
                {
                    def csSrc = "${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}\\${BASE_BRANCH}"
                    def csTarget = "${env.SOLUTION_FOLDER}\\${SETTINGS['ptrfix']}\\${BRANCH_NAME}"
                    def modulesRoot = "${env.WORKSPACE}\\CS\\module"
                    powershell "Remove-Item -Path ${env.WORKSPACE}\\CS\\* -Recurse -Force -ErrorAction Continue"
                    powershell "Copy-Item -Path ${csSrc}\\module -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    def themeTargetBranchExists = new File("${csTarget}\\theme").exists()
                    powershell "Copy-Item -Path ${themeTargetBranchExists ? csTarget : csSrc}\\theme -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    if(new File("${csTarget}\\storefront").exists())
                    {
                        STOREFRONT_INSTALL = true
                        powershell "Copy-Item -Path ${csTarget}\\storefront -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    }
                    dir(modulesRoot)
                    {
                        powershell "Get-ChildItem ${csTarget}\\module -Name | Remove-Item -ErrorAction SilentlyContinue -Force -Recurse"
                    }
                    powershell "Copy-Item -Path ${csTarget}\\* -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    powershell "Rename-Item -Path ${modulesRoot} -NewName modules"
                }
            }
        }
        stage("Docker Environment")
        {
            steps
            {
                script
                {
                    stage('Create Test Environment') 
                    {
                        timestamps 
                        { 
                            DOCKER_SQL_PORT = Utilities.getSqlPort(this)
                            DOCKER_PLATFORM_PORT = Utilities.getPlatformPort(this)
                            DOCKER_STOREFRONT_PORT = Utilities.getStorefrontPort(this)
                            switch(BASE_BRANCH)
                            {
                                case 'dev':
                                DOCKER_TAG = 'dev-branch'
                                break
                                case 'master':
                                DOCKER_TAG = 'latest'
                                break
                                case 'dev-3.0.0':
                                DOCKER_TAG = '3.0-dev'
                                break
                                case 'release_3.0.0':
                                DOCKER_TAG = '3.0-preview'
                                break
                            }
                            // Start docker environment	
                            dir(Utilities.getComposeFolderV3(this))
                            {
                                echo "DOCKER_TAG=${DOCKER_TAG}, DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}, DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}, DOCKER_SQL_PORT=${DOCKER_SQL_PORT}"
                                // 1. stop containers
                                // 2. remove instances including database
                                // 3. start up new containers
                                withEnv(["DOCKER_TAG=${DOCKER_TAG}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"])
                                {
                                    bat "docker-compose stop"
                                    bat "docker-compose rm -f -v"
                                    bat "docker-compose up -d"
                                }
                            }			
                        }
                    }
                    stage('Install Modules')
                    {
                        timestamps
                        {
                            def platformContainer = Utilities.getPlatformContainer(this)

                            // install modules
                            Utilities.runPS(this, 'docker_v3/setup-modulesFromDir.ps1', "-PlatformContainer ${platformContainer} -ModulesDir ${env.WORKSPACE}\\CS\\modules -Verbose -Debug")
                        }
                    }
                    stage('Install Sample Data')
                    {
                        timestamps
                        {
                            Utilities.runPS(this, "docker_v3/vc-setup-sampledata.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -Verbose -Debug")
                        }
                    }
                    stage('Storefront Install')
                    {
                        timestamps
                        {
                            if(STOREFRONT_INSTALL)
                            {
                                def storefrontContainer = Utilities.getStorefrontContainer(this)
                                def storefrontDir = "${env.WORKSPACE}\\CS\\storefront"
                                //bat "docker exec ${storefrontContainer} cmd /c \"rmdir /S /Q C:\\vc-storefront\""
                                bat "docker stop ${storefrontContainer}"
                                bat "docker cp ${storefrontDir} ${storefrontContainer}:/vc-storefront/."
                                bat "docker start ${storefrontContainer}"
                            }
                        }
                    }
                    stage('Theme Install')
                    {
                        timestamps 
                        {
                            //def storefrontContainer = Utilities.getStorefrontContainer(this)
                            def platformContainer = Utilities.getPlatformContainer(this)
                            def themeFolder = "${env.WORKSPACE}\\CS\\theme"
                            //Utilities.runSharedPS(this, "vc-install-theme.ps1", "-themeZip \"${themeFolder}\" -platformContainer ${platformContainer}")
                            bat "docker exec ${platformContainer} powershell -Command \"Remove-Item C:\\vc-platform\\App_Data\\cms-content\\Themes -Recurse -Force\""
                            bat "docker exec ${platformContainer} powershell -Command \"mkdir tmp\""
                            bat "docker cp ${themeFolder} ${platformContainer}:/tmp/Themes"
                            bat "docker exec ${platformContainer} powershell -Command \"Copy-Item -Path C:\\tmp\\Themes -Destination C:\\vc-platform\\App_Data\\cms-content\\Themes -Recurse -Force\""
                        }
                    }
                    
                    stage('Awaiting Proceed'){
                        def message = "Platform url: ${SETTINGS["platformContainerUrl"]}:${DOCKER_PLATFORM_PORT}\nStorefront: ${SETTINGS["storefrontContainerUrl"]}:${DOCKER_STOREFRONT_PORT}"
                        input(message)
                    }
                }
            }
        }
        
        stage('Delivery')
        {
            when
            {
                equals expected: true, actual: DELIVERY_AZURE
            }
            steps
            {
                script
                {
                    echo "stub"
                }
            }
        }
    }

    post
    {
        always
        {
            script
            {
                dir(Utilities.getComposeFolderV3(this))
                {
                    withEnv(["DOCKER_TAG=${DOCKER_TAG}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]){
                        bat "docker-compose down -v"
                    }
                }
            }
        }
    }
}