import groovy.json.JsonSlurperClassic

def globalLib = library('global-shared-lib').com.test
def Utilities = globalLib.Utilities
def Packaging = globalLib.Packaging
def Modules = globalLib.Modules
def Settings = globalLib.Settings

def SETTINGS

def TRG_BRANCH
def SRC_BRANCH
def DELIVERY_AZURE = false

def DOCKER_SQL_PORT
def DOCKER_PLATFORM_PORT
def DOCKER_STOREFRONT_PORT

def PLATFORM_DOCKER_TAG
def STOREFRONT_DOCKER_TAG

def STOREFRONT_INSTALL

pipeline
{
    agent any

    options
    {
        timestamps()
    }
    stages
    {
        stage("User Input")
        {
            steps
            {
                script
                {
                    checkout scm
                    // configFileProvider([configFile(fileId: 'qaenv', variable: 'SETTINGS_FILE')]) {
                    //     SETTINGS = Settings.new(readFile(SETTINGS_FILE))
                    // }
                    // SETTINGS.setProject("qaenv")
                    // SETTINGS.setBranch("master")
                    // def branches = Utilities.getSubfolders("${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}").join("\n")
                    // def userInput = input message: "Select Branch", parameters: 
                    // [
                    //     choice(name:'Source Branch', choices:SETTINGS['sourceBranches']),
                    //     choice(name:'Target Branch', choices:branches),
                    //     booleanParam(defaultValue: false, name: 'Delviery to Azure')
                    // ]
                    // SRC_BRANCH = userInput["Source Branch"]
                    // TRG_BRANCH = userInput["Target Branch"]
                    // DELIVERY_AZURE = userInput["Delivery to Azure"]
                    // echo "Source Branch: ${SRC_BRANCH}; Target Branch: ${TRG_BRANCH};"
                    def settingsFileContent
                    configFileProvider([configFile(fileId: 'delivery_settings', variable: 'SETTINGS_FILE')]) {
                        settingsFileContent = readFile(SETTINGS_FILE)
                    }
                    SETTINGS = Settings.new(settingsFileContent)
                    def regionChoices = SETTINGS.getProjects().join("\n")
                    def buildOrder = Utilities.getNextBuildOrder(this)
                    def userInputRegion = input message: "Select Region", parameters: [
                        choice(name: 'Region', choices: regionChoices)
                    ]
                    PROJECT_TYPE = 'SOLUTION'
                    REGION = userInputRegion
                    UPDATE_CS = true
                    SETTINGS.setProject(REGION)

                    def envChoices = SETTINGS.getBranches().join("\n")
                    def userEnvInput = input message: "Select Environment", parameters: [
                        choice(name: 'Environments', choices: envChoices)
                    ]
                    ENV_NAME = userEnvInput
                    SETTINGS.setBranch(ENV_NAME)
                    
                    def srcBranches = SETTINGS['branch'] as String[]
                    def targetBranches = Utilities.getSubfolders("${env.SOLUTION_FOLDER}\\vc").join("\n")
                    def userInputBranch = input message: "Select Branch", parameters: [
                            choice(name:'Source Branch', choices:srcBranches.join("\n")),
                            choice(name:'Target Branch', choices:targetBranches),
                            booleanParam(defaultValue: false, name: 'Delviery to Azure')
                        ]
                    SRC_BRANCH = userInputBranch['Source Branch']
                    TRG_BRANCH = userInputBranch['Target Branch']
                    DELIVERY_AZURE = userInputBranch['Delviery to Azure']
                    echo "Vars: REGION - ${REGION}, DELIVERY_AZURE - ${DELIVERY_AZURE}, ENV_NAME - ${ENV_NAME}, SRC_BRANCH - ${SRC_BRANCH}, TRG_BRANCH - ${TRG_BRANCH}"
                }
            }
        }
        stage("Preparing Solution"){
            steps
            {
                script
                {
                    def csSrc = "${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}\\${SRC_BRANCH}"
                    def csTarget = "${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}\\${TRG_BRANCH}"
                    def modulesRoot = "${env.WORKSPACE}\\CS\\module"
                    powershell "Remove-Item -Path ${env.WORKSPACE}\\CS\\* -Recurse -Force -ErrorAction Continue"
                    powershell "Copy-Item -Path ${csSrc}\\module -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    
                    if(SRC_BRANCH == 'support_2.x' || SRC_BRANCH == 'support_2.x-dev' || SRC_BRANCH == 'dev' || SRC_BRANCH == 'master')
                    {
                        def solutionRoot = "${env.SOLUTION_FOLDER}\\${SETTINGS['prefix']}"
                        //theme
                        def themeIncludeParam = ''
                        def themeSrc = "${solutionRoot}\\${SETTINGS['themeBranch']}\\theme"
                        def themeTargetBranchExists = new File("${solutionRoot}\\${TRG_BRANCH}\\theme").exists()
                        if(themeTargetBranchExists)
                        {
                            themeSrc = "${solutionRoot}\\${TRG_BRANCH}\\theme"
                        }
                        def themeDst = "${env.WORKSPACE}\\CS\\theme"
                        if(SETTINGS['themeName'] != '' && SETTINGS['themeName'] != null)
                        {
                            themeIncludeParam = "-Include ${SETTINGS['themeName'].join(',')}"
                        }
                        powershell script: "mkdir ${themeDst}"
                        powershell script: "Copy-Item -Path ${themeSrc}\\* ${themeIncludeParam} -Destination ${themeDst} -Recurse -Force", label: "Copy Theme to Workspace"
                        //storefront
                        def storefrontSrc = "${solutionRoot}\\${SETTINGS['storefrontBranch']}"
                        powershell script: "Copy-Item -Path ${storefrontSrc}\\* -Destination ${env.WORKSPACE}\\CS -Include storefront -Recurse -Force", label: "Copy Storefron to Workspace"
                    } 
                    else {
                        def themeTargetBranchExists = new File("${csTarget}\\theme").exists()
                        powershell "Copy-Item -Path ${themeTargetBranchExists ? csTarget : csSrc}\\theme -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                        if(new File("${csTarget}\\storefront").exists())
                        {
                            STOREFRONT_INSTALL = true
                            powershell "Copy-Item -Path ${csTarget}\\storefront -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                        }
                    }
                    
                    dir(modulesRoot)
                    {
                        powershell "Get-ChildItem ${csTarget}\\module -Name | Remove-Item -ErrorAction SilentlyContinue -Force -Recurse"
                    }
                    powershell "Copy-Item -Path ${csTarget}\\* -Destination ${env.WORKSPACE}\\CS -Recurse -Force"
                    powershell "Rename-Item -Path ${modulesRoot} -NewName modules"
                }
            }
        }
        // stage("Docker Environment")
        // {
        //     steps
        //     {
        //         script
        //         {
        //             stage('Create Test Environment') 
        //             {
        //                 timestamps 
        //                 { 
        //                     DOCKER_SQL_PORT = Utilities.getSqlPort(this)
        //                     DOCKER_PLATFORM_PORT = Utilities.getPlatformPort(this)
        //                     DOCKER_STOREFRONT_PORT = Utilities.getStorefrontPort(this)
        //                     switch(SRC_BRANCH)
        //                     {
        //                         case 'dev':
        //                         PLATFORM_DOCKER_TAG = '3.0-dev'
        //                         STOREFRONT_DOCKER_TAG = '3.0-dev'
        //                         break
        //                         case 'master':
        //                         PLATFORM_DOCKER_TAG = '3.0'
        //                         STOREFRONT_DOCKER_TAG = '3.0'
        //                         break
        //                     }
        //                     // Start docker environment	
        //                     dir(Utilities.getComposeFolderV3(this))
        //                     {
        //                         echo "PLATFORM_DOCKER_TAG=${PLATFORM_DOCKER_TAG}, STOREFRONT_DOCKER_TAG=${STOREFRONT_DOCKER_TAG}, DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}, DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}, DOCKER_SQL_PORT=${DOCKER_SQL_PORT}"
        //                         // 1. stop containers
        //                         // 2. remove instances including database
        //                         // 3. start up new containers
        //                         withEnv(["PLATFORM_DOCKER_TAG=${PLATFORM_DOCKER_TAG}", "STOREFRONT_DOCKER_TAG=${STOREFRONT_DOCKER_TAG}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"])
        //                         {
        //                             bat "docker-compose up -d"
        //                         }
        //                     }			
        //                 }
        //             }
        //             stage('Install Modules')
        //             {
        //                 timestamps
        //                 {
        //                     def platformContainer = Utilities.getPlatformContainer(this)
        //                     def platformHost = Utilities.getPlatformCoreHost(this)

        //                     // install modules
        //                     Utilities.runPS(this, 'docker_v3/setup-modulesFromDir.ps1', "-PlatformContainer ${platformContainer} -ModulesDir ${env.WORKSPACE}\\CS\\modules -Verbose -Debug")
        //                     Utilities.runPS(this, "docker_v3/vc-check-installed-modules.ps1", "-ApiUrl ${platformHost} -Verbose -Debug")
        //                 }
        //             }
        //             stage('Install Sample Data')
        //             {
        //                 timestamps
        //                 {
        //                     Utilities.runPS(this, "docker_v3/vc-setup-sampledata.ps1", "-ApiUrl ${Utilities.getPlatformCoreHost(this)} -Verbose -Debug")
        //                 }
        //             }
        //             stage('Storefront Install')
        //             {
        //                 timestamps
        //                 {
        //                     if(STOREFRONT_INSTALL)
        //                     {
        //                         def storefrontContainer = Utilities.getStorefrontContainer(this)
        //                         def storefrontDir = "${env.WORKSPACE}\\CS\\storefront"
        //                         //bat "docker exec ${storefrontContainer} cmd /c \"rmdir /S /Q C:\\vc-storefront\""
        //                         bat "docker stop ${storefrontContainer}"
        //                         bat "docker cp ${storefrontDir} ${storefrontContainer}:/vc-storefront/."
        //                         bat "docker start ${storefrontContainer}"
        //                     }
        //                 }
        //             }
        //             stage('Theme Install')
        //             {
        //                 timestamps 
        //                 {
        //                     // //def storefrontContainer = Utilities.getStorefrontContainer(this)
        //                     // def platformContainer = Utilities.getPlatformContainer(this)
        //                     // def themeFolder = "${env.WORKSPACE}\\CS\\theme"
        //                     // //Utilities.runSharedPS(this, "vc-install-theme.ps1", "-themeZip \"${themeFolder}\" -platformContainer ${platformContainer}")
        //                     // bat "docker exec ${platformContainer} powershell -Command \"Remove-Item C:\\vc-platform\\App_Data\\cms-content\\Themes -Recurse -Force\""
        //                     // bat "docker exec ${platformContainer} powershell -Command \"mkdir tmp\""
        //                     // bat "docker cp ${themeFolder} ${platformContainer}:/tmp/Themes"
        //                     // bat "docker exec ${platformContainer} powershell -Command \"Copy-Item -Path C:\\tmp\\Themes -Destination C:\\vc-platform\\App_Data\\cms-content\\Themes -Recurse -Force\""
        //                     Utilities.runPS(this, "docker_v3/vc-theme-install.ps1", "-ThemePath ${env.WORKSPACE}\\CS\\theme -StorefrontContainer ${Utilities.getStorefrontContainer(this)}")
        //                 }
        //             }
                    
        //             stage('Awaiting Proceed')
        //             {
        //                 timestamps
        //                 {  
        //                     def platformPort = Utilities.getPlatformPort(this)
        //                     def storefrontPort = Utilities.getStorefrontPort(this)
        //                     def msg = "Storefront:\nhttp://ci.virtocommerce.com:${storefrontPort}\nPlatform:\nhttp://ci.virtocommerce.com:${platformPort}"
        //                     input message: msg
        //                 }
        //             }
        //         }
        //     }
        // }
        
        stage("Create / Update Environment"){
            when {
                expression {
                    UPDATE_CS
                }
            }
            steps {
                script{
                    def resourceGroupName = SETTINGS['resourceGroupName']
                    Utilities.createInfrastructure(this, "${resourceGroupName}")
                }
            }
        }

        stage("Update Solution"){
            when {
                expression {
                    UPDATE_CS
                }
            }
            steps {
                script{
                    def csRoot = "${env.WORKSPACE}\\CS"
                    def webAppName = SETTINGS['webAppName']
                    def webAppPublicName = SETTINGS['webAppPublicName']
                    def resourceGroupName = SETTINGS['resourceGroupName']
                    def subscriptionID = SETTINGS['subscriptionID']
                    def blobToken = SETTINGS['blobToken']
                    def themeSrcDir = "${csRoot}\\theme"
                    def themeBlobPath = ""
                    def themeBlobPathParam = ""
                    // if(SETTINGS['themeName'] != null)
                    // {
                    //     themeBlobPath = "Themes/${SETTINGS['themeName']}"
                    //     themeSrcDir = "${themeSrcDir}\\${SETTINGS['themeName']}"
                    //     themeBlobPathParam = "-ThemeBlobPath ${themeBlobPath}"
                    // }
                    withEnv(["AzureBlobToken=${blobToken}"]){
                        Utilities.runSharedPS(this, 'delivery/upload-CS.ps1', 
                            "-PlatformDir ${csRoot}\\platform -ModulesDir ${csRoot}\\modules -StorefrontDir ${csRoot}\\storefront -ThemeDir ${themeSrcDir} -WebAppName ${webAppName} -WebAppPublicName ${webAppPublicName} -ResourceGroupName ${resourceGroupName} -SubscriptionID ${subscriptionID} -StorageAccount ${SETTINGS['storageAccount']} -BlobContainerName ${SETTINGS['blobContainerName']} ${themeBlobPathParam}")
                    }
                }
            }
        }
    }

    post
    {
        always
        {
            script
            {
                dir(Utilities.getComposeFolderV3(this))
                {
                    withEnv(["PLATFORM_DOCKER_TAG=${PLATFORM_DOCKER_TAG}", "STOREFRONT_DOCKER_TAG=${STOREFRONT_DOCKER_TAG}", "DOCKER_PLATFORM_PORT=${DOCKER_PLATFORM_PORT}", "DOCKER_STOREFRONT_PORT=${DOCKER_STOREFRONT_PORT}", "DOCKER_SQL_PORT=${DOCKER_SQL_PORT}", "COMPOSE_PROJECT_NAME=${env.BUILD_TAG}"]){
                        echo "Stop Docker ;)"
                        // bat "docker-compose down -v"
                    }
                }
            }
        }
    }
}